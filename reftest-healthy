#! /bin/sh -
#
# Evaluate numbers of reftest skipped on a specific platform
#

readonly ALL_PLATFORMS=( Linux OSX B2G Android )
readonly ALL_FAILURE_TYPE=( "skip-if" "random-if" "fail-if" )
PLATFOMRS=( )
# by default, gather all skip-if test cases
FAILURE_TYPE=( skip-if )
VERBOSE=0

help_message()
{
  echo "EXAMPLES"
  echo "  reftest-healthy -p B2G -f skip-if -v"
  echo "  reftest-healthy -p B2G -f random-if -v"
  echo "  reftest-healthy -p Android -f skip-if -v"
  echo "  reftest-healthy -p Android -f random-if -v"
  exit 0
}

# $1 - positional parameter
# $2 - valid values
# $3 - output valid values
function parse_parameter_value
{
  declare -a params=(${1//:/ })
  declare -a alls=("${!2}")
  #platforms=(`echo $1 | cut -d ':' -f  1-`)

  # verify platforms
  for i in "${params[@]}"
  do
    local found=0
    for j in "${alls[@]}"
    do
      if [ "${i}" == "${j}" ]; then
        found=1
        break
      fi
    done

    if [ "${found}" -eq "0" ]; then
      echo "Error - invalidate parameter: $i"
      exit 1
    fi
  done

  eval "$3=( "${params[@]}" )"
}

# position parameter parsing
while test $# -gt 0
do
  case $1 in
    --help | -h | '-?' )
      help_message
      ;;
    --platform | -p)
      d=`echo $2 | sed -n "/^-/!p"`
      if [ "${#d}" -ne "0" ]; then
        parse_parameter_value $2 ALL_PLATFORMS[@] PLATFORMS
        shift
      fi
      ;;
    --failure | -f)
      d=`echo $2 | sed -n "/^-/!p"`
      if [ "${#d}" -ne "0" ]; then
        parse_parameter_value $2 ALL_FAILURE_TYPE[@] FAILURE_TYPE
        shift
      fi
      ;;
    --verbose | -v)
      VERBOSE=1
      ;;
    -* )
      echo "Unrecognized option: $1"
      exit 1
      ;;
    * )
      break
      ;;
  esac
  shift
done

# OK, input parameters seem to be correct.
# The platfroms that we are interested on are stored in PLATFORMS
# The conditions that we are interested on are stored in FAILURE_TYPE

# Gather XXXX.list files
FILES=( $(find . -name reftest.list) )
TOTAL_MATCH=0
TOTAL_TEST_CASE=0

for file in "${FILES[@]}"
do
  match_pattern="${FAILURE_TYPE[0]}([!)]*${PLATFORMS[0]}.*"
  match_items=( "`sed -n "/#/!p" "$file" | sed -n "/${match_pattern}/p"`" )
  word_count=`echo "$match_items" | wc -c`

  # XXX: why there is one line for no matched file??
  if test ${word_count} -le "1" ; then
    match_count=0
  else
    match_count=`echo "$match_items" | wc -l`
  fi

  if [ ${match_count} -ne "0" ] && [ $VERBOSE == "1" ]; then
    echo "++ ${file}"
    for test_case in "${match_items[@]}"
    do
      echo "${test_case}"
    done
    echo "---------------------"
  fi

  ((TOTAL_MATCH+=${match_count}))
done

GREEN="\033[32m"
OFF="\033[0m"

echo "Statistic report"
echo "* ${GREEN}Failure type${OFF}: ${FAILURE_TYPE[0]}"
echo "* ${GREEN}Platform${OFF}: ${PLATFORMS[0]}"
echo "* ${GREEN}Total match${OFF}: "$TOTAL_MATCH""

