#! /bin/sh -
#
#

readonly ALL_PLATFORMS=( "Linux" "OSX" "B2G" "Android" )
readonly ALL_FAILURE_TYPE=( "skip-if" "random-if" "fail-if" )
PLATFORMS=( B2G )
FAILURE_TYPE=( skip-if )
VERBOSE=0

help_message()
{
  echo "EXAMPLES"
  echo "  reftest-healthy -p B2G -f skip-if -v"
  echo "  reftest-healthy -p B2G -f random-if -v"
  echo "  reftest-healthy -p Android -f skip-if -v"
  echo "  reftest-healthy -p Android -f random-if -v"
  exit 0
}

# $1 - positional parameter
# $2 - valid values
# $3 - output valid values
function parse_parameter_value
{
  declare -a params=( ${1//:/ } )  # Replace all ":" by " "
  declare -a alls=( ${!2} )        # Indirect reference to $2i

  # verify platforms
  for i in "${params[@]}"
  do
    local found=0
    for j in "${alls[@]}"
    do
      if [ "${i}" == "${j}" ]; then
        found=1
        break
      fi
    done

    if [ "${found}" -eq "0" ]; then
      echo "Error - invalidate parameter: $i"
      exit 1
    fi
  done

  eval "$3=( "${params[@]}" )"
}

# Positional parameter parsing
while test $# -gt 0
do
  case $1 in
    --help | -h | '-?' )
      help_message
      ;;
    --platform | -p)
      d=`echo $2 | sed -n "/^-/!p"`
      if [ "${#d}" -ne "0" ]; then
        parse_parameter_value $2 ALL_PLATFORMS[@] PLATFORMS
        shift
      fi
      ;;
    --failure | -f)
      d=`echo $2 | sed -n "/^-/!p"`
      if [ "${#d}" -ne "0" ]; then
        parse_parameter_value $2 ALL_FAILURE_TYPE[@] FAILURE_TYPE
        shift
      fi
      ;;
    --verbose | -v)
      VERBOSE=1
      ;;
    -* )
      echo "Unrecognized option: $1"
      exit 1
      ;;
    * )
      break
      ;;
  esac
  shift
done

# OK, positional parameters seem to be correct.
# The platfroms that we are interested on are stored in PLATFORMS
# The failyre types that we concern are stored in FAILURE_TYPE

# Gather XXXX.list files
# XXX not a correct way to gather reftest files, I should refer to
# reftest.js.
SOURCE_FILES=( $(find . -name reftest.list) )
TOTAL_MATCH=0

GREEN="\033[32m"
OFF="\033[0m"

for file in "${SOURCE_FILES[@]}"
do
  # XXX for B2G, it's better to filter out all XUL/XBL test cases
  match_pattern="${FAILURE_TYPE[0]}([!)]*${PLATFORMS[0]}.*)"

# DO NOT INDENT the following two lines!! Use newline as seperator.
IFS='
'
  # Gather matched records
  match_items=( $(sed -n "/#/!p" "$file" |            # skip comment start by #
                  sed -n "/${match_pattern}/p")       # print matched records
              )

  # Display match records on stdout if need.
  if [ ${#match_items[@]} -ne "0" ] && [ $VERBOSE == "1" ]; then
    echo "${GREEN}++ ${file}${OFF} (totals: ${#match_items[@]})"
    for test_case in "${match_items[@]}"
    do
      echo "  ${test_case}"
    done
  fi

  ((TOTAL_MATCH+=${#match_items[@]}))
done

# Statistic output
if [ $VERBOSE == "1" ]; then
  echo "-------------------------------------------------------"
fi
echo "Statistic report"
echo "* ${GREEN}Failure type${OFF} : ${FAILURE_TYPE[0]}."
echo "* ${GREEN}Platform${OFF}     : ${PLATFORMS[0]}."
echo "* ${GREEN}Total match${OFF}  : "$TOTAL_MATCH"."

